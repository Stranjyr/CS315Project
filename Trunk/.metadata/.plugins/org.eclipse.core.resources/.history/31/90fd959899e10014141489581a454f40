package com.team9.finalproject.connectors;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Scanner;

import com.team9.finalproject.DataManager;

public class InteractiveConnector implements ConnectorInterface{

	private DataManager dm;
	private Scanner scan;
	public InteractiveConnector()
	{
		scan = new Scanner(System.in);
		display(startScreen());
		dm = loadDataManager();
		commandLoop();
		scan.close();
	}
	private String startScreen() {
		String s = "";
		s+=""+                                                                                             
				"              ,,                                    ,,                 ,,    ,,                  "+"\n"+
				"  .g8W0Wbgd `7MM                                  `7MM               `7MM    db                  "+"\n"+ 
				".dP`     `M   MM                                    MM                 MM                        "+"\n"+
				"M`           MMpMMMb.  ,pW-Wq.   ,p6-bo   ,pW-Wq.  MMpMMMb.  ,pW-Wq.  MM  `7MM  ,p6-bo  ,pP-Ybd  "+"\n"+
				"MM            MM    MM 6W     Wb 6M`  OO  6W     Wb MM    MM 6W     Wb MM    MM 6M`  OO  8I   `` "+"\n"+
				"MM.           MM    MM 8M     M8 8M       8M     M8 MM    MM 8M     M8 MM    MM 8M       `YMMMa. "+"\n"+
				" Mb.     ,    MM    MM YA.   ,A9 YM.      YA.   ,A9 MM    MM YA.   ,A9 MM    MM YM.      L.   I8 "+"\n"+
				"   =bmmmd`  .JMML  JMML. Ybmd9    YMbmd     Ybmd9 .JMML  JMML. Ybmd9 .JMML..JMML.YMbmd   M9mmmP` "+"\n";
                                                                                                                                                                                     
		s+="*************************************\n"
		  +"**** WELCOME OPERATOR ***************\n"
		  +"*************************************\n"
		  +"**** CHOCOHOLICS DATAMANAGER 1.0 ****\n"
		  +"**** A NEW PARADIGM IN CHOCOLATE ****\n"
		  +"*************************************\n"
		  +"**** COMMANDS ***********************\n"
		  +"**** H == HELP - Shows Commands******\n"
		  +"**** A == ADD - Add new Data*********\n"
		  +"**** E == EDIT - Edit data***********\n"
		  +"**** D == DELETE - Delete data*******\n"
		  +"**** R == REPORT - Run Reports*******\n"
		  +"**** Q == QUIT - Quits***************\n"
		  +"*************************************\n"
		  +"*************************************\n";
		
		  
		return s;
	}
	@Override
	public DataManager loadDataManager() {
		try
	      {
	         FileInputStream fileIn = new FileInputStream("/ChocoDataBase/ChocoData.ser");
	         ObjectInputStream in = new ObjectInputStream(fileIn);
	         DataManager temp = (DataManager) in.readObject();
	         in.close();
	         fileIn.close();
	         return temp;
	      }catch(IOException i)
	      {
	         //i.printStackTrace();
	         return new DataManager();
	      }catch(ClassNotFoundException c)
	      {
	         
	         //c.printStackTrace();
	         return new DataManager();
	      }
		
	}

	@Override
	public String commandLoop() {
		
		while(true)
		{
			display("Next Command?");
			String command = scan.next();
			switch(command.toUpperCase().charAt(0))
			{
				case 'H':
					display(help());
					break;
				case 'A':
					display("Add _M_ember, _P_rovider, or _Q_uit?");
					switch(scan.next().toUpperCase().charAt(0))
					{
						case 'M':
							display("Enter Member name to ");
							String name = scan.next();
							display("Enter member address");
							String addr = scan.next();
							display("Enter city");
							String city = scan.next();
							display("Enter state");
							String state = scan.next();
							display("Enter zip");
							String z = scan.next();
							
							display(addMember(name, addr, city, state, z));
					}
					//String name, String number, String address, String city, String state, String zip, String status
					display("Enter Member name to ");
					String name = scan.next();
					display("Enter member address");
					String addr = scan.next();
					display("Enter city");
					String city = scan.next();
					display("Enter state");
					String state = scan.next();
					display("Enter zip");
					String z = scan.next();
					display("Enter comment (Leave blank for no comment)");
					String com = scan.next();
					display(bill(memberId, provId, serCode, m+"//"+d+"//"+y, com));
					break;
				case 'E':
					display("Enter Member ID to validate");
					display(validate(scan.next()));
					break;
				case 'D':
					display(getDirectory());
					break;
				case 'R':
					display(getDirectory());
					break;
				case 'Q':
					//This does not break, it returns to exit the loop
					display(quit());
					return "Exited";
				default:
					display("Invalid Command");
					break;	
			}
			
		}
	}
	public String addMember(String name, String addr, String city, String state, String zip)
	{
		
	}
	public String help()
	{
		String s = "**** COMMANDS ***********************\n"
				  +"**** H == HELP - Shows Commands******\n"
				  +"**** A == ADD - Add new Data*********\n"
				  +"**** E == EDIT - Edit data***********\n"
				  +"**** D == DELETE - Delete data*******\n"
				  +"**** R == REPORT - Run Reports*******\n"
				  +"**** Q == QUIT - Quits***************\n"
				  +"*************************************\n"
				  +"*************************************\n";
		return(s);
	}

	@Override
	public String quit() {
		return dm.save()+"\nExiting";
	}

	
	/**
	 * Since this is a Console Display,
	 * This method is just println();
	 * If we later make a GUI,
	 * This method would write info to
	 * the screen
	 * 
	 * @param output String to be displayed
	 */
	@Override
	public String display(String output) {
		System.out.println(output);
		return null;
	}

}
